I plan to write down my journey while I uncover this old project.
~
Here, I will describe my thinking process while the commits add up over time.
~
The original project's environnement was already provided when I was landed the task to make this Chess game. Thus, the only configuration available was for Windows. I changed that to make sure a building process can be quickly modified for every compatible platform using QMake and Make. I wish to make it automatic in the future. Then, I was still not satisfied with the project's original folder structure, so I separated the source effectively. Another issue I encountered, was the fact that the Qt project is compiled in C++17, but the LSP of my IDE was not parsing the code with that information, and the IDE was also not recognizing the include path of my config. I added a .zed (for the Zed IDE), and a .clangd file (proper to the LSP) to make it work. Those files are local only, since specific to my IDE and OS (XCode tools).
~
I changed the file naming from the original code. This is to prevent errors in Linux servers where filenames may be case sensitive. I also switch all filenames to EN (from FR). I will do the same for the code eventually. In addition, I removed all the include lines to properly remanage the correct location of the logic code, for example, the namespace defintion should be defined in only one place.
~
The project all start inside the main.cpp where a Project object is created. We call show() to start the main loop of the Window panel, thus creating our application (Project inherits QMainWindow). I started by changing the headers. Most changes were simply removing methods that seemed redundant, or functions that were not returning the intended value. For example, in the Board class, with a function, we can get the position of a certain tile. Instead of only the position, it was returning the entire tile. Also, the namespace used was not defined properly; it was defined only once inside another header file where a class was defined, which caused weird pattern of files inclusion throughout the whole project. To fix this, I defined every class in different files inside the namespace. This allows to only include the partial defintion of namespace classes in the chess_definition file (if we need to know only the type of the variable) while allowing to include the full definition if needed (e.g. rook.h, king.h... needs the full definition of Piece to compile, since inherited). The amount of inclusion files is, at the same time, significantly reduced. including it  In addition, the pieces have private attributes for either the white character or the black character. This isn't good, since we are only defining once if the piece created is white or black at the beginning of the game, and it stays true for the entire duration. That results in a lot of wasted memory space. While we are on the subject, most classes do not have destructors, but have static methods to //// REGARDE tes GIT CHANGES
~
In order to make better modifications and to understand why these affect the program, I need to talk about the main loop. We don't have a lot of control in how the front-end application run the code, how the memory is handled, and which parts. We do have acces to an event system. We can create slots and override methods from QMainWindow, for instance, to manage mouse interaction. ... ... ...
